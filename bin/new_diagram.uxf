<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>165</x>
      <y>260</y>
      <w>140</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>/noodles::PanelStrategy/
--
-rows, cols, segment: int
-layout: Layout
-grid: Grid
-puzzle: Puzzle
-noodleStroke, baseStroke: BasicStroke
-themeName: String
-theme: Color[]
-clickPoint, mousePoint: Point2D.Double
-draggedNoodle: Noodle
--
+PanelStrategy(int rows, int cols, Layout layout, Grid grid, String themeName): ctor
+getRows(): int
+getCols(): int
+getLayout(): Layout
+getGrid(): Grid
+getPuzzle(): Puzzle
+getThemeName(): String
+getTheme(): Color[]
+getWrap(): boolean
+setLayout(Layout layout): void
+setGrid(Grid grid): void
+setPuzzle(Puzzle puzzle): void
+setNoodleStroke(BasicStroke noodleStroke): void
+setRows(int rows): void
+setCols(int cols): void
+setWrap(boolean wrap): void
+setTheme(String themeName): void
+regenerate(): void
+getSegment(Point2D.Double p1, Point2D.Double p2): int
+mousePressed(MouseEvent e, NoodlePanel panel): void
+mouseReleased(): void
+mouseDragged(MouseEvent e): void
+paintComponent(Graphics2D g2): void
+getGhostNoodle(Noodle[][] noodles, int row, int col): Noodle
+getGhost(int row, int col): Noodle
+getGhost(int row, int col, boolean powered, boolean[] activeSides): Noodle
+paintNoodle(Graphics2D g2, Noodle noodle, int row, int col): void
+drawSource(Noodle noodle, int row, int col): boolean
+setCustomSize(Dimension newSize): void
+getCustomWidth(double newWidth, boolean wrap): double
+getCustomHeight(double newHeight, boolean wrap): double
+getPreferredSize(boolean wrap): Dimension
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>290</x>
      <y>0</y>
      <w>220</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>noodles::Noodles
--
-colorComponents = new HashMap(): Map&lt;JComponent, Integer&gt;
-lowered: Border
-font = new Font(Font.DIALOG, Font.BOLD, 20): Font
-hexIcon, squareIcon: Noodle
-noodlePanel: NoodlePanel
-regenBtn: JButton
-wrapCheck: JCheckBox
-themeBox: JComboBox&lt;String&gt;
-frame: JFrame
-rowLabel, colLabel: JLabel
-mainPanel, puzzlePanel, shapePanel, sizePanel, wrapPanel: JPanel
-hexBtn, squareBtn: JRadioButton
-rowSpinner, colSpinner: JSpinner
--
+Noodles(): ctor
+main(String[] args): void
+actionPerformed(ActionEvent e): void
+stateChanged(ChangeEvent e): void
+itemStateChanged(ItemEvent e): void
+setWrapCheck(boolean enabled): void
-createSpinner(int init): JSpinner
-createLabel(String text): JLabel
-createRadioButton(ButtonGroup group, String text, boolean selected): JRadioButton
-initButton(AbstractButton button, boolean selected, int binaryColors): void
-initButtons(): void
-initComboBox(): void
-initSpinners(): void
-initLabels(): void
-initPanels(): void
-initBorders(): void
-initTheme(): void
-initFrame(): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>150</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>noodles::NoodlePanel
--
-strategy: PanelStrategy
-g2: Graphics2D
--
+NoodlePanel(PanelStrategy strategy): ctor
+getStrategy(): PanelStrategy
+getRows(): int
+getCols(): int
+getWrap(): boolean
+getThemeName(): String
+getTheme(): Color[]
+setRows(int rows): void
+setCols(int cols): void
+setStrategy(PanelStrategy strategy): void
+setWrap(boolean wrap): void
+setTheme(String theme): void
+regenerate(): void
+resetView(): void
+mouseClicked(MouseEvent e): void
+mouseEntered(MouseEvent e): void
+mouseExited(MouseEvent e): void
+mouseMoved(MouseEvent e): void
+mousePressed(MouseEvent e): void
+mouseReleased(MouseEvent e): void
+mouseDragged(MouseEvent e): void
+componentResized(ComponentEvent e): void
+componentHidden(ComponentEvent e): void
+componentMoved(ComponentEvent e): void
+componentShown(ComponentEvent e): void
#paintComponent(Graphics g): void
+getPreferredSize(): Dimension
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>285</x>
      <y>410</y>
      <w>260</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>/noodles::Layout/
--
+PADDINGRATIO = 0.05: double
+NOODLERATIO = 0.375: double
-size, marginX, marginY, innerScale, outerScale, cornerAngle, edgeAngle: double
-wrap: boolean
-segments: int
--
+Layout(double innerScale, double outerScale, double cornerAngle, double edgeAngle, boolean wrap, int segments): ctor
+getSize(): double
+getPadding(): double
+getMarginX(): double
+getMarginY(): double
+getCornerAngle(): double
+getWrap(): boolean
+getSegments(): int
+setSize(double size): void
+setMarginX(double marginX): void
+setMarginY(double marginY): void
+setWrap(boolean wrap): void
+setSegments(int segments): void
+getBase(Noodle noodle): Shape
-getCorners(double startAngle, Noodle noodle, double scale): Point2D.Double[]
+getNoodleSide(Noodle noodle, int side): Shape
-cornerOffset(double startAngle, int corner, double scale): Point2D.Double
+getOrigin(boolean wrap): Point2D.Double
+getStroke(): int
+getNoodleCenter(Noodle noodle, double scale): Shape
+noodleToPixel(Noodle noodle): Point2D.Double
+pixelToNoodle(Point2D.Double point): Noodle
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>365</x>
      <y>320</y>
      <w>155</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>/noodles::Grid/
--
-noodles: Noodle[][]
-neighbors: Point[]
--
+Grid(int rows, int cols, Point[] neighbors): ctor
+getNoodle(int row, int col): Noodle
+getNoodles(): Noodle[][]
+getRows(): int
+getCols(): int
+getRow(Noodle noodle): int
+getCol(Noodle noodle): int
+getNeighbor(Noodle noodle, int dir, boolean wrap): Noodle
+getNeighbors(): Point[]
#getNeighborRow(Noodle noodle, Point coords): int
#getNeighborCol(Noodle noodle, Point coords): int
+setNoodles(Noodle[][] noodles): void
+setNeighbors(Point[] neighbors): void
+initNoodles(int rows, int cols): void
+resetActiveSides(int sideCount): void
+resetPower(): void
+initNoodle(int row, int col): Noodle
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>285</y>
      <w>130</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>/noodles::Noodle/
--
-powered: boolean
-activeSides: boolean[]
-rotation: int
--
+Noodle(boolean[] activeSides): ctor
+Noodle(boolean powered, boolean[] activeSides): ctor
+getPowered(): boolean
+getActiveSides(): boolean[]
+getRotation(): int
+getActiveCount(): int
+setPowered(boolean powered): void
+setActive(int dir, boolean active): void
+setActiveSides(boolean[] activeSides): void
+setRotation(int rotation): void
+isVisited(): boolean
+rotate(int amount): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>350</x>
      <y>225</y>
      <w>205</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>/noodles::Puzzle/
--
-rand: Random
-dirs: int[]
-maxSides: int
-source: Noodle
-solved: boolean
--
+Puzzle(Grid grid, int[] dirs, int maxSides, boolean wrap): ctor
+getSource(): Noodle
+isSolved(): boolean
+initPuzzle(Grid grid, boolean wrap): void
+testPowered(Grid grid, boolean wrap): void
#shuffleDirections(): void
#shuffleNoodles(Noodle[][] noodles): void
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>505</y>
      <w>265</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>noodles.hex::HexLayout
--
+FLAT = new Orientation(3 / 2d, 0, Math.sqrt(3) / 2d, Math.sqrt(3), 2 / 3d, 0, -1 / 3d, Math.sqrt(3) / 3d): Orientation
+POINTY = new Orientation(Math.sqrt(3), Math.sqrt(3) / 2d, 0, 3 / 2d, Math.sqrt(3) / 3d, -1 / 3d, 0, 2 / 3d): Orientation
--
+HexLayout(boolean wrap): ctor
+getOrigin(boolean wrap): Point2D.Double
+getStroke(): int
+getNoodleCenter(Noodle noodle, double scale): Shape
+noodleToPixel(Noodle noodle): Point2D.Double
+pixelToNoodle(Point2D.Double point): Noodle
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>745</x>
      <y>300</y>
      <w>135</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>noodles.hex::FractionalHex
--
-q: double
-r: double
--
+FractionalHex(double q, double r): ctor
+getQ(): double
+getR(): double
+getS(): double
+hexRound(FractionalHex frac): Hex
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>5</x>
      <y>360</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>noodles.hex::Hex
--
-q: int
-r: int
--
+Hex(int q, int r): ctor
+Hex(int q, int r, boolean powered, boolean[] activeSides): ctor
+getQ(): int
+getR(): int
+getS(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>70</x>
      <y>195</y>
      <w>160</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>noodles::ColorTheme
--
-THEMES = initThemes(): Map&lt;String, Color[]&gt;
--
-initThemes(): Map&lt;String, Color[]&gt;
+getThemeNames(): String[]
+getTheme(String theme): Color[]
-initTheme(Color color): Color[]
-initTheme(Color powerColor, Color noodleColor, Color baseColor): Color[]
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>545</x>
      <y>365</y>
      <w>105</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>noodles.hex::HexGrid
--
--
+HexGrid(int rows, int cols): ctor
+getRow(Noodle noodle): int
+getCol(Noodle noodle): int
+getNeighborRow(Noodle noodle, Point coords): int
+getNeighborCol(Noodle noodle, Point coords): int
+initNoodle(int row, int col): Noodle
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>125</x>
      <y>395</y>
      <w>140</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>noodles.hex::HexPanel
--
--
+HexPanel(int rows, int cols, String themeName, boolean wrap): ctor
+getGhost(int row, int col): Noodle
+getGhost(int row, int col, boolean powered, boolean[] activeSides): Noodle
+getCustomWidth(double newWidth, boolean wrap): double
+getCustomHeight(double newHeight, boolean wrap): double
+getPreferredSize(boolean wrap): Dimension
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1005</x>
      <y>620</y>
      <w>225</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>noodles.square::Square
--
-row: int
-col: int
--
+Square(int row, int col): ctor
+Square(int row, int col, boolean powered, boolean[] activeSides): ctor
+getRow(): int
+getCol(): int
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>615</y>
      <w>170</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>noodles.square::SquareGrid
--
--
+SquareGrid(int rows, int cols): ctor
+getRow(Noodle noodle): int
+getCol(Noodle noodle): int
+getNeighborRow(Noodle noodle, Point coords): int
+getNeighborCol(Noodle noodle, Point coords): int
+initNoodle(int row, int col): Noodle
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>195</x>
      <y>615</y>
      <w>185</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>noodles.square::SquareLayout
--
--
+SquareLayout(boolean wrap): ctor
+getOrigin(boolean wrap): Point2D.Double
+getStroke(): int
+getNoodleCenter(Noodle noodle, double scale): Shape
+noodleToPixel(Noodle noodle): Point2D.Double
+pixelToNoodle(Point2D.Double point): Noodle
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>385</x>
      <y>615</y>
      <w>245</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>noodles.square::SquarePanel
--
--
+SquarePanel(int rows, int cols, String themeName, boolean wrap): ctor
+getGhost(int row, int col): Noodle
+getGhost(int row, int col, boolean powered, boolean[] activeSides): Noodle
+getCustomWidth(double newWidth, boolean wrap): double
+getCustomHeight(double newHeight, boolean wrap): double
+getPreferredSize(boolean wrap): Dimension
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>240</y>
      <w>140</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>noodles.hex::HexPuzzle
--
--
+HexPuzzle(Grid grid, boolean wrap): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>705</x>
      <y>665</y>
      <w>150</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>noodles.square::SquarePuzzle
--
--
+SquarePuzzle(Grid grid, boolean wrap): ctor
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>655</x>
      <y>510</y>
      <w>155</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>noodles::Orientation
--
-forward: double[][]
-inverse: double[][]
-startAngle: double
--
+Orientation(double f0, double f1, double f2, double f3, double b0, double b1, double b2, double b3): ctor
+getForward(): double[][]
+getInverse(): double[][]
--
</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
